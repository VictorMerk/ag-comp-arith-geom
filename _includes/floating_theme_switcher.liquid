<!-- Floating Theme Controls -->
{% if site.enable_darkmode %}
<div id="floating-controls" class="floating-controls">
  <!-- Dark/Light Mode Toggle -->
  <button id="dark-mode-toggle" class="floating-control-btn dark-mode-btn" title="Toggle Dark/Light Mode">
    <i class="fas fa-moon" id="dark-mode-icon"></i>
  </button>
  
  <!-- Theme Switcher -->
  <button id="floating-theme-toggle" class="floating-control-btn theme-switcher-btn" title="Change Theme">
    <i class="fas fa-palette" id="floating-theme-icon"></i>
  </button>
  
  <!-- Theme Options Panel -->
  <div id="theme-options-panel" class="theme-options-panel">
    <div class="theme-option" data-theme="modern-ag" data-css="">
      <div class="theme-preview theme-preview-red"></div>
      <span>Modern AG</span>
    </div>
    <div class="theme-option" data-theme="classic" data-css="/assets/css/theme-1-classic.css">
      <div class="theme-preview theme-preview-classic"></div>
      <span>Classic</span>
    </div>
    <div class="theme-option" data-theme="modern" data-css="/assets/css/theme-2-modern.css">
      <div class="theme-preview theme-preview-modern"></div>
      <span>Modern</span>
    </div>
    <div class="theme-option" data-theme="dark" data-css="/assets/css/theme-3-dark.css">
      <div class="theme-preview theme-preview-dark"></div>
      <span>Dark</span>
    </div>
    <div class="theme-option" data-theme="pastel" data-css="/assets/css/theme-4-pastel.css">
      <div class="theme-preview theme-preview-pastel"></div>
      <span>Pastel</span>
    </div>
    <div class="theme-option" data-theme="minimal" data-css="/assets/css/theme-5-minimal.css">
      <div class="theme-preview theme-preview-minimal"></div>
      <span>Minimal</span>
    </div>
  </div>
</div>

<style>
.floating-controls {
  position: fixed;
  bottom: 2rem;
  left: 2rem;
  z-index: 9999;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 0.75rem;
}

.floating-control-btn {
  width: 56px;
  height: 56px;
  border-radius: 50%;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.dark-mode-btn {
  background: var(--neutral-900, #171717);
  color: var(--neutral-50, #fafafa);
}

.dark-mode-btn:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
  background: var(--neutral-800, #262626);
}

.theme-switcher-btn {
  background: var(--primary, #dc2626);
  color: white;
}

.theme-switcher-btn:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
  background: var(--red-700, #b91c1c);
}

.theme-options-panel {
  position: absolute;
  bottom: 0;
  left: 75px;
  background: var(--card, #ffffff);
  border: 1px solid var(--border, #e5e5e5);
  border-radius: var(--radius, 0.5rem);
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  padding: 1rem;
  min-width: 200px;
  opacity: 0;
  visibility: hidden;
  transform: translateX(-10px);
  transition: all 0.3s ease;
}

.theme-options-panel.show {
  opacity: 1;
  visibility: visible;
  transform: translateX(0);
}

.theme-option {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  cursor: pointer;
  border-radius: calc(var(--radius, 0.5rem) - 2px);
  transition: all 0.2s ease;
  border: 2px solid transparent;
}

.theme-option:hover {
  background: var(--muted, #f5f5f5);
}

.theme-option.active {
  background: var(--red-50, #fef2f2);
  border-color: var(--primary, #dc2626);
}

.theme-preview {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  border: 2px solid var(--border, #e5e5e5);
}

.theme-preview-red {
  background: linear-gradient(135deg, #dc2626, #991b1b);
}

.theme-preview-classic {
  background: linear-gradient(135deg, #3b82f6, #1d4ed8);
}

.theme-preview-modern {
  background: linear-gradient(135deg, #10b981, #059669);
}

.theme-preview-dark {
  background: linear-gradient(135deg, #374151, #111827);
}

.theme-preview-pastel {
  background: linear-gradient(135deg, #f472b6, #ec4899);
}

.theme-preview-minimal {
  background: linear-gradient(135deg, #6b7280, #374151);
}

/* Dark mode styles */
body.dark-mode .theme-options-panel,
[data-theme="dark"] .theme-options-panel {
  background: var(--neutral-900, #171717);
  border-color: var(--neutral-700, #404040);
  color: var(--neutral-50, #fafafa);
}

body.dark-mode .theme-option:hover,
[data-theme="dark"] .theme-option:hover {
  background: var(--neutral-800, #262626);
}

body.dark-mode .theme-option.active,
[data-theme="dark"] .theme-option.active {
  background: var(--red-950, #450a0a);
  border-color: var(--red-600, #dc2626);
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .floating-controls {
    bottom: 1rem;
    left: 1rem;
    gap: 0.5rem;
  }
  
  .floating-control-btn {
    width: 48px;
    height: 48px;
    font-size: 1rem;
  }
  
  .theme-options-panel {
    min-width: 180px;
    left: 60px;
  }
}

@media (max-width: 480px) {
  .floating-controls {
    bottom: 0.75rem;
    left: 0.75rem;
  }
  
  .floating-control-btn {
    width: 44px;
    height: 44px;
    font-size: 0.9rem;
  }
  
  .theme-options-panel {
    min-width: 160px;
    padding: 0.75rem;
    left: 55px;
  }
  
  .theme-option {
    padding: 0.5rem;
    gap: 0.5rem;
    font-size: 0.875rem;
  }
  
  .theme-preview {
    width: 20px;
    height: 20px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let themeStylesheet = null;
  let isDarkMode = localStorage.getItem('darkMode') === 'true';
  
  // Initialize dark mode
  function initDarkMode() {
    const body = document.body;
    const html = document.documentElement;
    const icon = document.getElementById('dark-mode-icon');
    
    console.log('Initializing dark mode:', isDarkMode);
    
    if (isDarkMode) {
      // DARK MODE: Dark background (#0a0a0a) with WHITE text (#fafafa)
      body.classList.add('dark-mode');
      body.setAttribute('data-theme', 'dark');
      if (icon) icon.className = 'fas fa-sun';
      
      // Force dark background with white text
      body.style.backgroundColor = '#0a0a0a';
      body.style.color = '#fafafa';
      html.style.backgroundColor = '#0a0a0a';
      
      // Apply dark mode CSS variables
      document.documentElement.style.setProperty('--background', '#0a0a0a');
      document.documentElement.style.setProperty('--foreground', '#fafafa');
      document.documentElement.style.setProperty('--card', '#171717');
      document.documentElement.style.setProperty('--card-foreground', '#fafafa');
      document.documentElement.style.setProperty('--border', '#262626');
      document.documentElement.style.setProperty('--muted', '#171717');
      document.documentElement.style.setProperty('--muted-foreground', '#a3a3a3');
      
      // Force dark background with white text on main content areas
      const mainElements = document.querySelectorAll('main, .container, .container-fluid, .hero-section, section, article, .card, .card-body');
      mainElements.forEach(el => {
        el.style.backgroundColor = '#0a0a0a';
        el.style.color = '#fafafa';
      });
      
      // Fix specific text elements
      const textElements = document.querySelectorAll('p, h1, h2, h3, h4, h5, h6, span, div, li, td, th');
      textElements.forEach(el => {
        // Only apply if not in navbar (navbar has its own styling)
        if (!el.closest('.navbar, .heidelberg-navbar, .glass-navbar')) {
          el.style.color = '#fafafa';
        }
      });
      
      // Force navbar dark mode styles
      const navbars = document.querySelectorAll('.navbar, .heidelberg-navbar, .glass-navbar');
      navbars.forEach(navbar => {
        navbar.style.backgroundColor = '#991b1b';
        navbar.style.borderBottomColor = '#262626';
      });
      
      const navbarBrands = document.querySelectorAll('.navbar .navbar-brand, .heidelberg-navbar .navbar-brand, .glass-navbar .navbar-brand');
      navbarBrands.forEach(brand => {
        brand.style.color = '#fafafa';
      });
      
      const navLinks = document.querySelectorAll('.navbar .nav-link, .heidelberg-navbar .nav-link, .glass-navbar .nav-link');
      navLinks.forEach(link => {
        link.style.color = 'rgba(255,255,255,0.95)';
      });
      
    } else {
      // LIGHT MODE: White background (#ffffff) with BLACK text (#0a0a0a)
      body.classList.remove('dark-mode');
      body.removeAttribute('data-theme');
      if (icon) icon.className = 'fas fa-moon';
      
      // Force light background with dark text
      body.style.backgroundColor = '#ffffff';
      body.style.color = '#0a0a0a';
      html.style.backgroundColor = '#ffffff';
      
      // Apply light mode CSS variables
      document.documentElement.style.setProperty('--background', '#ffffff');
      document.documentElement.style.setProperty('--foreground', '#0a0a0a');
      document.documentElement.style.setProperty('--card', '#ffffff');
      document.documentElement.style.setProperty('--card-foreground', '#0a0a0a');
      document.documentElement.style.setProperty('--border', '#e5e5e5');
      document.documentElement.style.setProperty('--muted', '#f5f5f5');
      document.documentElement.style.setProperty('--muted-foreground', '#737373');
      
      // Force light background with dark text on main content areas
      const mainElements = document.querySelectorAll('main, .container, .container-fluid, .hero-section, section, article, .card, .card-body');
      mainElements.forEach(el => {
        el.style.backgroundColor = '#ffffff';
        el.style.color = '#0a0a0a';
      });
      
      // Fix specific text elements
      const textElements = document.querySelectorAll('p, h1, h2, h3, h4, h5, h6, span, div, li, td, th');
      textElements.forEach(el => {
        // Only apply if not in navbar (navbar has its own styling)
        if (!el.closest('.navbar, .heidelberg-navbar, .glass-navbar')) {
          el.style.color = '#0a0a0a';
        }
      });
      
      // Force navbar light mode styles (restore original red)
      const navbars = document.querySelectorAll('.navbar, .heidelberg-navbar, .glass-navbar');
      navbars.forEach(navbar => {
        navbar.style.backgroundColor = '#dc2626';
        navbar.style.borderBottomColor = '#e5e5e5';
      });
      
      const navbarBrands = document.querySelectorAll('.navbar .navbar-brand, .heidelberg-navbar .navbar-brand, .glass-navbar .navbar-brand');
      navbarBrands.forEach(brand => {
        brand.style.color = '#fafafa';
      });
      
      const navLinks = document.querySelectorAll('.navbar .nav-link, .heidelberg-navbar .nav-link, .glass-navbar .nav-link');
      navLinks.forEach(link => {
        link.style.color = 'rgba(255,255,255,0.9)';
      });
    }
    
    console.log('Dark mode applied:', isDarkMode);
    console.log('Body background:', window.getComputedStyle(body).backgroundColor);
    console.log('Body color:', window.getComputedStyle(body).color);
  }
  
  // Toggle dark mode
  function toggleDarkMode() {
    isDarkMode = !isDarkMode;
    localStorage.setItem('darkMode', isDarkMode);
    console.log('Toggling dark mode to:', isDarkMode);
    initDarkMode();
    
    // Show notification
    const message = isDarkMode ? 'Dark mode enabled' : 'Light mode enabled';
    showNotification(message, isDarkMode ? '🌙' : '☀️');
  }
  
  // Theme switching function
  function loadTheme(themeName, cssFile) {
    console.log('Loading theme:', themeName, 'CSS:', cssFile);
    
    // Remove existing theme stylesheet
    if (themeStylesheet) {
      themeStylesheet.remove();
      themeStylesheet = null;
    }
    
    // Load new theme if CSS file specified
    if (cssFile && cssFile.trim() !== '') {
      themeStylesheet = document.createElement('link');
      themeStylesheet.rel = 'stylesheet';
      themeStylesheet.href = cssFile;
      themeStylesheet.id = 'theme-stylesheet';
      document.head.appendChild(themeStylesheet);
    }
    
    // Store theme preference
    localStorage.setItem('selected-theme', themeName);
    localStorage.setItem('theme', themeName);
    
    // Update body class
    document.body.className = document.body.className.replace(/theme-\w+/g, '');
    if (themeName !== 'modern-ag') {
      document.body.classList.add('theme-' + themeName);
    }
    
    // Reapply dark mode after theme change
    if (isDarkMode) {
      setTimeout(() => {
        initDarkMode();
      }, 200);
    }
    
    // Show notification
    showNotification(`Theme changed to ${themeName}`, '🎨');
    
    console.log('Theme loaded successfully:', themeName);
  }
  
  // Show notification
  function showNotification(message, icon) {
    const notification = document.createElement('div');
    notification.className = 'floating-notification';
    notification.innerHTML = `
      <span class="notification-icon">${icon}</span>
      <span class="notification-text">${message}</span>
    `;
    
    // Add styles
    const style = document.createElement('style');
    style.textContent = `
      .floating-notification {
        position: fixed;
        top: 2rem;
        right: 2rem;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px 20px;
        border-radius: 25px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        z-index: 10001;
        opacity: 0;
        transform: translateY(-20px);
        transition: all 0.3s ease;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        font-size: 14px;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      
      .floating-notification.show {
        opacity: 1;
        transform: translateY(0);
      }
      
      body.dark-mode .floating-notification,
      [data-theme="dark"] .floating-notification {
        background: rgba(255, 255, 255, 0.9);
        color: black;
      }
    `;
    
    document.head.appendChild(style);
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => notification.classList.add('show'), 100);
    
    // Remove after 2.5 seconds
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
          document.head.removeChild(style);
        }
      }, 300);
    }, 2500);
  }
  
  const darkModeBtn = document.getElementById('dark-mode-toggle');
  const themeBtn = document.getElementById('floating-theme-toggle');
  const themePanel = document.getElementById('theme-options-panel');
  const themeOptions = document.querySelectorAll('.theme-option');
  
  // Initialize dark mode first
  initDarkMode();
  
  if (darkModeBtn) {
    darkModeBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      console.log('Dark mode button clicked');
      toggleDarkMode();
    });
  }
  
  if (themeBtn && themePanel) {
    // Toggle theme panel
    themeBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      themePanel.classList.toggle('show');
    });
    
    // Close panel when clicking outside
    document.addEventListener('click', function(e) {
      if (!document.querySelector('.floating-controls').contains(e.target)) {
        themePanel.classList.remove('show');
      }
    });
    
    // Handle theme selection
    themeOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        e.stopPropagation();
        const selectedTheme = this.dataset.theme;
        const cssFile = this.dataset.css;
        
        console.log('Theme option clicked:', selectedTheme);
        
        // Update active state
        themeOptions.forEach(opt => opt.classList.remove('active'));
        this.classList.add('active');
        
        // Load the theme
        loadTheme(selectedTheme, cssFile);
        
        // Close panel
        themePanel.classList.remove('show');
      });
    });
    
    // Set initial active theme
    const currentTheme = localStorage.getItem('selected-theme') || localStorage.getItem('theme') || 'modern-ag';
    console.log('Current theme:', currentTheme);
    
    themeOptions.forEach(option => {
      if (option.dataset.theme === currentTheme) {
        option.classList.add('active');
        // Load the theme CSS if it exists and isn't the default
        const cssFile = option.dataset.css;
        if (cssFile && cssFile.trim() !== '' && currentTheme !== 'modern-ag') {
          loadTheme(currentTheme, cssFile);
        }
      }
    });
  }
  
  console.log('Floating controls initialized');
});
</script>
{% endif %} 