#!/usr/bin/env python3
"""
Consolidated Pages CMS health check:
- Validates .pages.yml, _config.yml
- Confirms plugin presence and key methods
- Checks content directories & front matter
- Optionally runs Jekyll build if Bundler available
"""

import os
import sys
import json
import yaml
import shutil
import subprocess
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parents[1]


def cd_project():
    os.chdir(PROJECT_ROOT)


def ok(msg):
    print(f"✅ {msg}")


def warn(msg):
    print(f"⚠️  {msg}")


def err(msg):
    print(f"❌ {msg}")


def validate_yaml(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            yaml.safe_load(f)
        ok(f"Valid YAML: {path}")
        return True
    except Exception as e:
        err(f"Invalid YAML {path}: {e}")
        return False


def validate_json(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            json.load(f)
        ok(f"Valid JSON: {path}")
        return True
    except Exception as e:
        err(f"Invalid JSON {path}: {e}")
        return False


def check_configs():
    print("\n=== Config files ===")
    a = validate_yaml("_config.yml")
    b = validate_yaml(".pages.yml")
    c = validate_json("pagescms.config.json") if Path("pagescms.config.json").exists() else True
    if not Path("pagescms.config.json").exists():
        warn("pagescms.config.json not yet generated by plugin; will be created on build")
    return a and b and c


def check_plugin():
    print("\n=== Plugin ===")
    p = Path("_plugins/pagescms_integration.rb")
    if not p.exists():
        err("Pages CMS plugin missing")
        return False
    text = p.read_text(encoding="utf-8")
    required = [
        "class PagesCMSIntegration",
        "Jekyll::Generator",
        "ensure_front_matter_structure",
        "process_pagescms_content",
    ]
    missing = [r for r in required if r not in text]
    if missing:
        err(f"Missing components in plugin: {missing}")
        return False
    ok("Plugin present and looks valid")
    return True


def check_content():
    print("\n=== Content ===")
    dirs = ["_members", "_publications", "_research", "_teaching", "_links", "_pages"]
    all_ok = True
    for d in dirs:
        if Path(d).exists():
            files = list(Path(d).glob("*.md"))
            ok(f"{d}: {len(files)} markdown files")
            if files:
                text = files[0].read_text(encoding="utf-8")
                if not text.lstrip().startswith("---"):
                    warn(f"{d}: first file missing front matter")
                    all_ok = False
        else:
            warn(f"{d}: directory missing")
    return all_ok


def try_jekyll_build():
    print("\n=== Jekyll build ===")
    if shutil.which("bundle") is None:
        warn("Bundler not available; skipping build in this environment")
        return True
    try:
        res = subprocess.run(["bundle", "exec", "jekyll", "build", "--safe"],
                             capture_output=True, text=True, timeout=120)
        if res.returncode == 0:
            ok("Jekyll build succeeded")
            return True
        err(f"Jekyll build failed: {res.stderr.strip()[:500]}")
        return False
    except Exception as e:
        err(f"Error running Jekyll: {e}")
        return False


def main():
    cd_project()
    print("PAGESCMS HEALTH CHECK")
    print("=" * 60)
    a = check_configs()
    b = check_plugin()
    c = check_content()
    d = try_jekyll_build()
    print("\nSummary:")
    passed = sum([a, b, c, d])
    print(f"Passed {passed}/4")
    sys.exit(0 if all([a, b, c, d]) else 1)


if __name__ == "__main__":
    main()


